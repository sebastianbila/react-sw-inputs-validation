{"version":3,"sources":["../../src/utils/Validator.js","../../src/utils/errorMessage.js","../../src/hooks/useValidation.js","../../src/components/TextField.js","App.js","../../src/hooks/useInput.js","index.js"],"names":["preparedResult","isValid","msg","Validator","required","args","is","minLength","Error","isUrl","isEmail","isCreditCard","isAlphaNumeric","isDateString","isTimeString","isHexColor","isIp","isIpv4","isIpv7","regex","params","useValidation","options","validator","useState","isTouched","errorMessage","status","setStatus","validate","value","key","option","result","onBlur","event","TextField","props","type","placeholder","onChange","label","id","className","validation","htmlFor","Math","invalid","errorMsg","styles","App","input","Date","name","setValue","$value","bind","clear","useInput","ReactDOM","render","document","getElementById"],"mappings":"mcAmBA,SAASA,EAAeC,EAASC,GAC/B,MAAO,CAAED,QAAF,EAAWC,OAGpB,IAAaC,EAAb,6DACEC,YACE,IAAMF,EAAMG,OCzBT,oBD0BH,OAAOL,EAAeM,cAAaD,EAAd,OAArB,IAHJ,YAMEE,YACE,IAAKF,EAAL,IAAe,MAAM,IAAIG,MClBtB,iDDmBH,IAAMN,EAAMG,OCfU,uCDeaA,EAAnC,ICfsB,IDgBtB,OAAOL,EAAeK,gBAAqBA,EAAtB,IAArB,IATJ,QAYEI,YACE,IAAMP,EAAMG,OCjCT,iBDkCH,OAAOL,EAAeM,QAAOD,EAAR,OAArB,IAdJ,UAiBEK,YACE,IAAMR,EAAMG,OCvCT,mBDwCH,OAAOL,EAAeM,UAASD,EAAV,OAArB,IAnBJ,eAsBEM,YACE,IAAMT,EAAMG,OC1CT,kBD2CH,OAAOL,EAAeM,eAAcD,EAAf,OAArB,IAxBJ,iBA2BEO,YACE,IAAMV,EAAMG,OC9CT,wBD+CH,OAAOL,EAAeM,iBAAgBD,EAAjB,OAArB,IA7BJ,eAgCEQ,YACE,IAAMX,EAAMG,OClDT,sBDmDH,OAAOL,EAAeM,eAAcD,EAAf,OAArB,IAlCJ,eAqCES,YACE,IAAMZ,EAAMG,OCtDT,sBDuDH,OAAOL,EAAeM,eAAcD,EAAf,OAArB,IAvCJ,aA0CEU,YACE,IAAMb,EAAMG,OC1DT,oBD2DH,OAAOL,EAAeM,eAAcD,EAAf,OAArB,IA5CJ,OA+CEW,YACE,IAAMd,EAAMG,OC9DT,cD+DH,OAAOL,EAAeM,OAAMD,EAAP,OAArB,IAjDJ,SAoDEY,YACE,IAAMf,EAAMG,OClET,gBDmEH,OAAOL,EAAeM,SAAQD,EAAT,OAArB,IAtDJ,SAyDEa,YACE,IAAMhB,EAAMG,OCtET,eDuEH,OAAOL,EAAeM,SAAQD,EAAT,OAArB,IA3DJ,QA8DEc,YACE,IAAKd,EAAL,MAAiB,MAAM,IAAIG,MCxExB,wDD0EH,IAAMY,EAASf,mBAAkBA,EAAlBA,QAAf,GACAe,UAAef,EAAfe,OAEA,IAAMlB,EAAMG,OC1FT,eD6FH,OAAOL,EAFQK,gBAAf,GAEA,IAvEJ,KEpBO,SAASgB,EAAcC,GAC5B,IAAMC,EAAY,IAAlB,EADqC,EAETC,mBAAS,CACnCvB,SADmC,EAEnCwB,WAFmC,EAGnCC,aAAc,KAHTC,EAF8B,KAEtBC,EAFsB,KAU/BC,EAAW,SAACC,GAFOF,EAAU,EAAD,MAAcH,WAAW,KAMzD,IAAIxB,GAAJ,EACIC,EAAJ,GACIG,EAAJ,GAoBA,OAlBAiB,WAAgB,YACd,IAAMS,EAAMC,GAAUA,EAAtB,IAIA,GADA3B,EAAO,EAAH,MAAgByB,WAChBP,EAAJ,GAWO,MAAM,IAAIf,MAAM,SAAV,EAAN,iCATL,IAAMyB,EAASV,KAAf,GAEIU,IAAWA,EAAf,UACEhC,EAAUgC,EAAVhC,QACAC,EAAM+B,EAAN/B,KAIF0B,EAAU,EAAD,MAAc3B,QAAd,EAAuByB,aAAcxB,QAGlD,GASF,MAAO,CACLgC,OAPa,SAACC,GACdN,EAASM,SAATN,QAOAA,SAFK,EAGL5B,QALc,iBAAO,CAAEA,QAAS0B,EAAX,QAA2BzB,IAAKyB,EAAOD,eAM5DC,OAJK,EAKLC,a,0BChDW,SAASQ,EAAUC,GAAO,IAErCC,EAQED,EAVmC,KAGrCE,EAOEF,EAVmC,YAIrCP,EAMEO,EAVmC,MAKrCG,EAKEH,EAVmC,SAMrCI,EAIEJ,EAVmC,MAOrCK,EAGEL,EAVmC,GAQrCM,EAEEN,EAVmC,UASrCO,EACEP,EAVmC,WAYjCQ,EAAUH,GAASJ,EAAP,IAAeQ,KAAjC,SAEIC,GAAJ,EACIC,EAjBN,gBAwBE,OALA,IACED,GAAWH,EAAXG,QACAC,EAAWJ,EAAXI,KAIA,yBAAKL,UAAWA,GAAaM,GAC3B,2BAAON,UAAWI,EAAUE,EAA5B,KAAmDJ,QAASA,GACzDJ,GAFL,SAKE,6BACEE,UAAWI,EAAUE,EADvB,KAEEX,KAAMA,GAFR,OAGEI,GAHF,EAIEH,YAAaA,GAJf,GAKET,MALF,EAMEU,SAAUA,GAXd,IAeGO,EAAU,8BAAH,GAhBZ,MCxBF,IAiBeG,EAjBH,KACV,IAAMC,ECDD,SAAkB7B,GACvB,MAAc,MAAM,IAAId,MAAV,+CACd,IAAKc,EAAL,KAAmB,MAAM,IAAId,MAAV,yBAEnB,IAAM8B,EAAOhB,QAAb,OACMoB,EAAKpB,MAAiBgB,EAAjBhB,IAAyB8B,KAApC,MACMC,EAAO/B,EAAb,KACMiB,EAAcjB,eAApB,GAPgC,EAQNE,mBAASF,SARH,IAQzBQ,EARyB,KAQlBwB,EARkB,KAS1BV,EAAavB,EAAcC,EAAjC,YAGMkB,EAAW,SAACL,GAChB,IAAMoB,EAASpB,SAAf,MACAS,cACAU,MAOIpB,EAAS,SAACC,GAAD,OAAWS,SAAX,IAOf,MAAO,CACLY,KAHW,CAAElB,KAAF,EAAQI,GAAR,EAAYW,KAAZ,EAAkBd,YAAlB,EAA+BT,MAA/B,EAAsCU,SAAtC,EAAgDN,UAI3DI,KAFK,EAGLI,GAHK,EAILW,KAJK,EAKLd,YALK,EAMLT,MANK,EAOLI,OAPK,EAQLU,WAlBcA,EAAhB,UAmBEjB,OAAQiB,EATH,OAULJ,SAVK,EAWLiB,MAfY,kBAAMH,EAAN,MDxBAI,CAAS,CACrBL,KAAM,OACNd,YAAa,kBACbK,WAAY,CACV,CAAEN,KAAM,UAAWpC,IAAK,wBACxB,cAIJ,OACE,yBAAKyC,UAAU,aACb,kBAACP,EAAD,iBAAee,EAAMK,KAArB,CAA2Bf,MAAO,cAAeG,WAAYO,EAAMP,gB,MERzEe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.ea8c7ff8.chunk.js","sourcesContent":["import is from 'is_js'\nimport {\n  INVALID_ALPHA_NUMERIC,\n  INVALID_CREDIT_CARD,\n  INVALID_DATA,\n  INVALID_DATE_STRING,\n  INVALID_EMAIL,\n  INVALID_HEX_COLOR,\n  INVALID_IP,\n  INVALID_IPV4,\n  INVALID_IPV6,\n  INVALID_TIME_STRING,\n  INVALID_URL,\n  MIN_LENGTH,\n  MIN_LENGTH_REQUIRED,\n  REGEX_REQUIRED,\n  REQUIRED\n} from './errorMessage'\n\nfunction preparedResult(isValid, msg) {\n  return { isValid, msg }\n}\n\nexport class Validator {\n  required(args) {\n    const msg = args.msg || REQUIRED\n    return preparedResult(is.not.empty(args.value), msg)\n  }\n\n  minLength(args) {\n    if (!args.min) throw new Error(MIN_LENGTH_REQUIRED)\n    const msg = args.msg || MIN_LENGTH(args.min)\n    return preparedResult(args.value.length >= args.min, msg)\n  }\n\n  isUrl(args) {\n    const msg = args.msg || INVALID_URL\n    return preparedResult(is.url(args.value), msg)\n  }\n\n  isEmail(args) {\n    const msg = args.msg || INVALID_EMAIL\n    return preparedResult(is.email(args.value), msg)\n  }\n\n  isCreditCard(args) {\n    const msg = args.msg || INVALID_CREDIT_CARD\n    return preparedResult(is.creditCard(args.value), msg)\n  }\n\n  isAlphaNumeric(args) {\n    const msg = args.msg || INVALID_ALPHA_NUMERIC\n    return preparedResult(is.alphaNumeric(args.value), msg)\n  }\n\n  isDateString(args) {\n    const msg = args.msg || INVALID_DATE_STRING\n    return preparedResult(is.dateString(args.value), msg)\n  }\n\n  isTimeString(args) {\n    const msg = args.msg || INVALID_TIME_STRING\n    return preparedResult(is.timeString(args.value), msg)\n  }\n\n  isHexColor(args) {\n    const msg = args.msg || INVALID_HEX_COLOR\n    return preparedResult(is.timeString(args.value), msg)\n  }\n\n  isIp(args) {\n    const msg = args.msg || INVALID_IP\n    return preparedResult(is.ip(args.value), msg)\n  }\n\n  isIpv4(args) {\n    const msg = args.msg || INVALID_IPV4\n    return preparedResult(is.ipv4(args.value), msg)\n  }\n\n  isIpv7(args) {\n    const msg = args.msg || INVALID_IPV6\n    return preparedResult(is.ipv6(args.value), msg)\n  }\n\n  regex(args) {\n    if (!args.regex) throw new Error(REGEX_REQUIRED)\n\n    const params = args.params ? [...args.params] : []\n    params.unshift(args.value)\n\n    const msg = args.msg || INVALID_DATA\n    const result = args.regex(...params)\n\n    return preparedResult(result, msg)\n  }\n}\n","export const REQUIRED = 'Input is required'\nexport const INVALID_DATA = 'Invalid data'\nexport const INVALID_EMAIL = 'Email is invalid'\nexport const INVALID_URL = 'Url is invalid'\nexport const INVALID_CREDIT_CARD = 'Url credit card'\nexport const INVALID_ALPHA_NUMERIC = 'Invalid alpha numeric'\nexport const INVALID_DATE_STRING = 'Invalid date string'\nexport const INVALID_TIME_STRING = 'Invalid tome string'\nexport const INVALID_HEX_COLOR = 'Invalid hex color'\nexport const INVALID_IP = 'Invalid IP '\nexport const INVALID_IPV4 = 'Invalid IPV4 '\nexport const INVALID_IPV6 = 'Invalid IPV6'\nexport const MIN_LENGTH_REQUIRED =\n  'Param -min- is required for length validation'\nexport const REGEX_REQUIRED =\n  'For type regex, you must to provide regex expression'\nexport const MIN_LENGTH = (min) => `The minimum length of characters is ${min} `\n","import { useState } from 'react'\nimport { Validator } from '../utils/Validator'\n\nexport function useValidation(options) {\n  const validator = new Validator()\n  const [status, setStatus] = useState({\n    isValid: true,\n    isTouched: false,\n    errorMessage: ''\n  })\n\n  const setTouched = () => setStatus({ ...status, isTouched: true })\n\n  const validate = (value) => {\n    /* Mark field as touched */\n    setTouched()\n\n    let isValid = true\n    let msg = ''\n    let args = {}\n\n    options.forEach((option) => {\n      const key = option || option.key\n\n      /* Pass value to args */\n      args = { ...option, value }\n      if (validator[key]) {\n        /* Validate by args */\n        const result = validator[key](args)\n\n        if (result && !result.isValid) {\n          isValid = result.isValid\n          msg = result.msg\n        }\n\n        /* Set validation status */\n        setStatus({ ...status, isValid, errorMessage: msg })\n      } else throw new Error(`Type -${key}- not provided for validation`)\n    })\n    return status\n  }\n\n  const onBlur = (event) => {\n    validate(event.target.value)\n  }\n\n  const isValid = () => ({ isValid: status.isValid, msg: status.errorMessage })\n\n  return {\n    onBlur,\n    validate,\n    isValid,\n    status,\n    setStatus\n  }\n}\n","import React from 'react'\nimport styles from '../styles.module.css'\n\nconst INVALID_VALUE = 'Invalid value'\n\nexport default function TextField(props) {\n  const {\n    type,\n    placeholder,\n    value,\n    onChange,\n    label,\n    id,\n    className,\n    validation\n  } = props\n\n  const htmlFor = id || `${type}-${Math.random()}`\n\n  let invalid = false\n  let errorMsg = INVALID_VALUE\n\n  if (validation) {\n    invalid = !validation.isValid\n    errorMsg = validation.msg\n  }\n\n  return (\n    <div className={className || styles.TextField}>\n      <label className={invalid ? styles.invalid : null} htmlFor={htmlFor}>\n        {label || 'Label'}\n      </label>\n\n      <input\n        className={invalid ? styles.invalid : null}\n        type={type || 'text'}\n        id={htmlFor}\n        placeholder={placeholder || ''}\n        value={value}\n        onChange={onChange}\n        {...props}\n      />\n\n      {invalid ? <span>{errorMsg}</span> : null}\n    </div>\n  )\n}\n","import React from 'react'\nimport { TextField, useInput } from 'react-sw-inputs-validation'\n\nconst App = () => {\n  const input = useInput({\n    name: 'name',\n    placeholder: 'Enter your name',\n    validation: [\n      { type: 'isEmail', msg: 'Email is wrong, dude' },\n      'required'\n    ]\n  })\n\n  return (\n    <div className=\"container\">\n      <TextField {...input.bind} label={'Email input'} validation={input.validation} />\n    </div>\n  )\n}\n\nexport default App\n","import { useState } from 'react'\nimport { useValidation } from './useValidation'\n\nexport function useInput(options) {\n  if (!options) throw new Error('At least one option [name] must be provided')\n  if (!options.name) throw new Error('Name must be provided')\n\n  const type = options.type || 'text'\n  const id = options.id || `${type}-${Date.now()}`\n  const name = options.name\n  const placeholder = options.placeholder || ''\n  const [value, setValue] = useState(options.value || '')\n  const validation = useValidation(options.validation)\n\n  /* Input on change */\n  const onChange = (event) => {\n    const $value = event.target.value\n    validation.validate($value)\n    setValue($value)\n  }\n\n  /* If input is valid */\n  const isValid = validation.isValid()\n\n  /* When input was touched */\n  const onBlur = (event) => validation.onBlur(event)\n\n  /* Clear input */\n  const clear = () => setValue('')\n\n  const bind = { type, id, name, placeholder, value, onChange, onBlur }\n\n  return {\n    bind,\n    type,\n    id,\n    name,\n    placeholder,\n    value,\n    onBlur,\n    validation: isValid,\n    status: validation.status,\n    onChange,\n    clear\n  }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'react-sw-inputs-validation/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}