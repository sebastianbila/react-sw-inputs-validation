{"version":3,"sources":["../../src/utils/Validator.js","../../src/utils/errorMessage.js","../../src/hooks/useInput.js","../../src/hooks/useValidation.js","../../src/components/TextField.js","App.js","../../src/hooks/useForm.js","index.js"],"names":["preparedResult","isValid","msg","Validator","required","args","is","checked","minLength","Error","isUrl","isEmail","isCreditCard","isAlphaNumeric","isDateString","isTimeString","isHexColor","isIp","isIpv4","isIpv7","regex","params","useInput","options","type","id","Date","name","placeholder","useState","setChecked","value","setValue","validation","validator","isTouched","status","setStatus","setTouched","validate","key","option","result","onBlur","event","useValidation","onChange","$value","v","bind","clear","TextField","props","label","className","parentstyle","labelstyle","htmlFor","Math","invalid","errorMsg","styles","style","App","inputs","renderInputs","map","item","index","labelStyle","input","display","width","form","isFormValid","fields","useForm","action","method","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a733a4d.chunk.js","sourcesContent":["import is from 'is_js'\nimport {\n  INVALID_ALPHA_NUMERIC,\n  INVALID_CREDIT_CARD,\n  INVALID_DATA,\n  INVALID_DATE_STRING,\n  INVALID_EMAIL,\n  INVALID_HEX_COLOR,\n  INVALID_IP,\n  INVALID_IPV4,\n  INVALID_IPV6,\n  INVALID_TIME_STRING,\n  INVALID_URL,\n  MIN_LENGTH,\n  MIN_LENGTH_REQUIRED,\n  REGEX_REQUIRED,\n  REQUIRED,\n  CHECKBOX_REQUIRED\n} from './errorMessage'\n\nfunction preparedResult(isValid, msg) {\n  return { isValid, msg }\n}\n\nexport class Validator {\n  required(args) {\n    const msg = args.msg || REQUIRED\n    return preparedResult(is.not.empty(args.value), msg)\n  }\n\n  checked(args) {\n    const msg = args.msg || CHECKBOX_REQUIRED\n    return preparedResult(args.value, msg)\n  }\n\n  minLength(args) {\n    if (!args.min) throw new Error(MIN_LENGTH_REQUIRED)\n    const msg = args.msg || MIN_LENGTH(args.min)\n    return preparedResult(args.value.length >= args.min, msg)\n  }\n\n  isUrl(args) {\n    const msg = args.msg || INVALID_URL\n    return preparedResult(is.url(args.value), msg)\n  }\n\n  isEmail(args) {\n    const msg = args.msg || INVALID_EMAIL\n    return preparedResult(is.email(args.value), msg)\n  }\n\n  isCreditCard(args) {\n    const msg = args.msg || INVALID_CREDIT_CARD\n    return preparedResult(is.creditCard(args.value), msg)\n  }\n\n  isAlphaNumeric(args) {\n    const msg = args.msg || INVALID_ALPHA_NUMERIC\n    return preparedResult(is.alphaNumeric(args.value), msg)\n  }\n\n  isDateString(args) {\n    const msg = args.msg || INVALID_DATE_STRING\n    return preparedResult(is.dateString(args.value), msg)\n  }\n\n  isTimeString(args) {\n    const msg = args.msg || INVALID_TIME_STRING\n    return preparedResult(is.timeString(args.value), msg)\n  }\n\n  isHexColor(args) {\n    const msg = args.msg || INVALID_HEX_COLOR\n    return preparedResult(is.timeString(args.value), msg)\n  }\n\n  isIp(args) {\n    const msg = args.msg || INVALID_IP\n    return preparedResult(is.ip(args.value), msg)\n  }\n\n  isIpv4(args) {\n    const msg = args.msg || INVALID_IPV4\n    return preparedResult(is.ipv4(args.value), msg)\n  }\n\n  isIpv7(args) {\n    const msg = args.msg || INVALID_IPV6\n    return preparedResult(is.ipv6(args.value), msg)\n  }\n\n  regex(args) {\n    if (!args.regex) throw new Error(REGEX_REQUIRED)\n\n    const params = args.params ? [...args.params] : []\n    params.unshift(args.value)\n\n    const msg = args.msg || INVALID_DATA\n    const result = args.regex(...params)\n\n    return preparedResult(result, msg)\n  }\n}\n","export const REQUIRED = 'Input is required'\nexport const CHECKBOX_REQUIRED = 'Checkbox must be checked'\nexport const INVALID_DATA = 'Invalid data'\nexport const INVALID_EMAIL = 'Email is invalid'\nexport const INVALID_URL = 'Url is invalid'\nexport const INVALID_CREDIT_CARD = 'Url credit card'\nexport const INVALID_ALPHA_NUMERIC = 'Invalid alpha numeric'\nexport const INVALID_DATE_STRING = 'Invalid date string'\nexport const INVALID_TIME_STRING = 'Invalid tome string'\nexport const INVALID_HEX_COLOR = 'Invalid hex color'\nexport const INVALID_IP = 'Invalid IP '\nexport const INVALID_IPV4 = 'Invalid IPV4 '\nexport const INVALID_IPV6 = 'Invalid IPV6'\nexport const MIN_LENGTH_REQUIRED =\n  'Param -min- is required for length validation'\nexport const REGEX_REQUIRED =\n  'For type regex, you must to provide regex expression'\nexport const MIN_LENGTH = (min) => `The minimum length of characters is ${min} `\n","import { useState } from 'react'\nimport { useValidation } from './useValidation'\n\nexport function useInput(options) {\n  if (!options) throw new Error('At least one option [name] must be provided')\n  if (!options.name) throw new Error('Name must be provided')\n\n  const type = options.type || 'text'\n  const id = options.id || `${type}-${Date.now()}`\n  const name = options.name\n  const placeholder = options.placeholder || ''\n  const [checked, setChecked] = useState(options.checked)\n  const [value, setValue] = useState(options.value || '')\n  const validation = useValidation(options.validation)\n\n  /* Input on change */\n  const onChange = (event) => {\n    validation.setTouched()\n\n    const $value = event.target.value\n    validation.validate($value)\n\n    if (type === 'checkbox') {\n      const v = !checked\n      validation.validate(v)\n      setChecked(v)\n    }\n    setValue($value)\n  }\n\n  /* When input was touched */\n  const onBlur = (event) => {\n    if (type === 'checkbox') return\n    validation.onBlur(event)\n  }\n\n  /* Is input valid */\n  const isValid = validation.isValid()\n\n  /* Clear input */\n  const clear = () => setValue('')\n\n  const bind = { type, id, name, placeholder, value, onChange, onBlur }\n\n  const args = {\n    bind,\n    type,\n    id,\n    name,\n    placeholder,\n    value,\n    status: validation.status,\n    validation: isValid,\n    onBlur,\n    onChange,\n    clear\n  }\n\n  if (type === 'checkbox') {\n    bind.checked = checked\n    args.checked = checked\n  }\n\n  return {\n    bind,\n    ...args\n  }\n}\n","import { useState } from 'react'\nimport { Validator } from '../utils/Validator'\n\nexport function useValidation(options) {\n  const validator = new Validator()\n  const [status, setStatus] = useState({\n    isValid: true,\n    isTouched: false,\n    msg: ''\n  })\n\n  const setTouched = () => setStatus({ ...status, isTouched: true })\n\n  const validate = (value) => {\n    /* Mark field as touched */\n    setTouched()\n\n    let isValid = true\n    let msg = ''\n    let args = {}\n\n    if (options) {\n      options.forEach((option) => {\n        const key = option.type || option\n\n        /* Pass value to args */\n        args = { option, value }\n        if (validator[key]) {\n          /* Validate by args */\n          const result = validator[key](args)\n\n          if (result && !result.isValid) {\n            isValid = result.isValid\n            msg = result.msg\n          }\n\n          /* Set validation status */\n          setStatus({ isTouched: true, isValid, msg })\n        } else throw new Error(`Type -${key}- not provided for validation`)\n      })\n    }\n    return status\n  }\n\n  const onBlur = (event) => validate(event.target.value)\n\n  const isValid = () => ({ isValid: status.isValid, msg: status.msg })\n\n  return {\n    onBlur,\n    validate,\n    isValid,\n    setTouched,\n    status,\n    setStatus\n  }\n}\n","import React from 'react'\nimport styles from '../styles.module.css'\n\nconst INVALID_VALUE = 'Invalid value'\n\nexport default function TextField(props) {\n  const {\n    type,\n    placeholder,\n    value,\n    onChange,\n    label,\n    id,\n    className,\n    validation,\n    parentstyle,\n    labelstyle\n  } = props\n\n  const htmlFor = id || `${type}-${Math.random()}`\n\n  let invalid = false\n  let errorMsg = INVALID_VALUE\n\n  if (validation) {\n    invalid = !validation.isValid\n    errorMsg = validation.msg\n  }\n\n  return (\n    <div className={className || styles.TextField} style={parentstyle}>\n      <label\n        className={invalid ? styles.invalid : null}\n        htmlFor={htmlFor}\n        style={labelstyle}\n      >\n        {label || 'Label'}\n      </label>\n\n      <input\n        className={invalid ? styles.invalid : null}\n        type={type || 'text'}\n        id={htmlFor}\n        placeholder={placeholder || ''}\n        value={value}\n        onChange={onChange}\n        {...props}\n      />\n\n      {invalid ? <span>{errorMsg}</span> : null}\n    </div>\n  )\n}\n","import React from 'react'\nimport { TextField, useInput, useForm } from 'react-sw-inputs-validation'\n\nconst App = () => {\n\n  const inputs = [\n    { name: 'firstName', placeholder: 'First name *', label: 'First name', validation: ['required'] },\n    { name: 'lastName', placeholder: 'Last name', label: 'Last name' },\n    { name: 'email', placeholder: 'Email address *', label: 'Email address', validation: ['isEmail'] },\n    { type: 'number', name: 'phone', placeholder: 'Phone number*', label: 'Phone number' },\n    { type: 'checkbox', name: 'box', checked: false, label: 'Are you 18+?', validation: ['checked'] }\n  ]\n\n  const renderInputs = inputs.map((item, index) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const input = useInput({ ...item })\n\n    inputs[index] = input\n\n    let labelStyle, style\n    if (item.type === 'checkbox') {\n      labelStyle = { display: 'inline-block' }\n      style = { display: 'inline-block', width: '1%' }\n    }\n    return (\n      <TextField\n        key={index}\n        labelstyle={labelStyle}\n        style={style}\n        {...input.bind}\n        label={item.label}\n        validation={input.validation} />\n    )\n  })\n\n  const form = useForm(inputs)\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <form name=\"example-form\" action=\"\" method=\"post\">\n          <div className=\"row\">\n            {renderInputs}\n            <button type='button' disabled={!form.isFormValid}>Submit</button>\n          </div>\n        </form>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","export function useForm(inputs) {\n  let isFormValid = true\n  let fields = {}\n\n  for (const input of inputs) {\n    if (!input.status.isValid) {\n      isFormValid = false\n      break\n    }\n    isFormValid = input.status.isTouched && input.status.isValid\n  }\n\n  inputs.map((input) => {\n    fields = {\n      ...fields,\n      [input.name]: input.value\n    }\n  })\n\n  return {\n    isFormValid,\n    fields\n  }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'react-sw-inputs-validation/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}