{"version":3,"sources":["../../src/utils/validator.js","../../src/utils/validation.js","../../src/utils/errorMessage.js","../../src/hooks/useInput.js","../../src/components/TextField.js","App.js","index.js"],"names":["preparedResult","isValid","msg","validator","required","args","is","minLength","Error","isUrl","isEmail","isCreditCard","isAlphaNumeric","isDateString","isTimeString","isHexColor","isIp","isIpv4","isIpv7","regex","params","useInput","options","type","useState","name","placeholder","label","id","Math","value","setValue","inputValidation","valid","shouldValidate","touched","errorMessage","validation","setValidation","bind","onChange","event","$value","$params","$validate","key","item","result","validate","bindV","clear","TextField","props","fieldstyles","className","htmlFor","invalidInputStyle","invalid","error","localStyles","labelStyle","inputStyle","spanStyle","isInvalid","v","styles","style","App","input","min","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dae57ae6.chunk.js","sourcesContent":["import is from 'is_js'\nimport {\n  INVALID_ALPHA_NUMERIC,\n  INVALID_CREDIT_CARD,\n  INVALID_DATA,\n  INVALID_DATE_STRING,\n  INVALID_EMAIL,\n  INVALID_HEX_COLOR,\n  INVALID_IP,\n  INVALID_IPV4,\n  INVALID_IPV6,\n  INVALID_TIME_STRING,\n  INVALID_URL,\n  MIN_LENGTH,\n  MIN_LENGTH_REQUIRED,\n  REGEX_REQUIRED,\n  REQUIRED\n} from './errorMessage'\n\nfunction preparedResult(isValid, msg) {\n  return { isValid, msg }\n}\n\nexport class Validator {\n  required(args) {\n    const msg = args.msg || REQUIRED\n    return preparedResult(is.not.empty(args.value), msg)\n  }\n\n  minLength(args) {\n    if (!args.min) throw new Error(MIN_LENGTH_REQUIRED)\n    const msg = args.msg || MIN_LENGTH(args.min)\n    return preparedResult(args.value.length >= args.min, msg)\n  }\n\n  isUrl(args) {\n    const msg = args.msg || INVALID_URL\n    return preparedResult(is.url(args.value), msg)\n  }\n\n  isEmail(args) {\n    const msg = args.msg || INVALID_EMAIL\n    return preparedResult(is.email(args.value), msg)\n  }\n\n  isCreditCard(args) {\n    const msg = args.msg || INVALID_CREDIT_CARD\n    return preparedResult(is.creditCard(args.value), msg)\n  }\n\n  isAlphaNumeric(args) {\n    const msg = args.msg || INVALID_ALPHA_NUMERIC\n    return preparedResult(is.alphaNumeric(args.value), msg)\n  }\n\n  isDateString(args) {\n    const msg = args.msg || INVALID_DATE_STRING\n    return preparedResult(is.dateString(args.value), msg)\n  }\n\n  isTimeString(args) {\n    const msg = args.msg || INVALID_TIME_STRING\n    return preparedResult(is.timeString(args.value), msg)\n  }\n\n  isHexColor(args) {\n    const msg = args.msg || INVALID_HEX_COLOR\n    return preparedResult(is.timeString(args.value), msg)\n  }\n\n  isIp(args) {\n    const msg = args.msg || INVALID_IP\n    return preparedResult(is.ip(args.value), msg)\n  }\n\n  isIpv4(args) {\n    const msg = args.msg || INVALID_IPV4\n    return preparedResult(is.ipv4(args.value), msg)\n  }\n\n  isIpv7(args) {\n    const msg = args.msg || INVALID_IPV6\n    return preparedResult(is.ipv6(args.value), msg)\n  }\n\n  regex(args) {\n    if (!args.regex) throw new Error(REGEX_REQUIRED)\n\n    const params = args.params ? [...args.params] : []\n    params.unshift(args.value)\n\n    const msg = args.msg || INVALID_DATA\n    const result = args.regex(...params)\n\n    return preparedResult(result, msg)\n  }\n}\n","import { Validator } from './validator'\n\nconst validator = new Validator()\n\nexport function validate(value, validation) {\n  if (!validation) return true\n  let isValid = true\n  let msg = ''\n  let key = null\n  let options = {}\n\n  validation.forEach((item) => {\n    if (typeof item !== 'string' && typeof item !== 'object')\n      throw new Error('The method only receive object or string')\n\n    typeof item === 'object' ? (key = item.type) : (key = item)\n\n    options = { ...item, value }\n    if (validator[key]) {\n      const result = validator[key](options)\n\n      if (result && !result.isValid) {\n        isValid = result.isValid\n        msg = result.msg\n      }\n    } else throw new Error(`Type -${key}- not provided for validation`)\n  })\n  return { isValid, msg }\n}\n","export const REQUIRED = 'Input is required'\nexport const INVALID_DATA = 'Invalid data'\nexport const INVALID_EMAIL = 'Email is invalid'\nexport const INVALID_URL = 'Url is invalid'\nexport const INVALID_CREDIT_CARD = 'Url credit card'\nexport const INVALID_ALPHA_NUMERIC = 'Invalid alpha numeric'\nexport const INVALID_DATE_STRING = 'Invalid date string'\nexport const INVALID_TIME_STRING = 'Invalid tome string'\nexport const INVALID_HEX_COLOR = 'Invalid hex color'\nexport const INVALID_IP = 'Invalid IP '\nexport const INVALID_IPV4 = 'Invalid IPV4 '\nexport const INVALID_IPV6 = 'Invalid IPV6'\nexport const MIN_LENGTH_REQUIRED =\n  'Param -min- is required for length validation'\nexport const REGEX_REQUIRED =\n  'For type regex, you must to provide regex expression'\nexport const MIN_LENGTH = (min) => `The minimum length of characters is ${min} `\n","import { useState } from 'react'\nimport { validate } from '../utils/validation'\n\nexport function useInput(options) {\n  if (!options) throw new Error('At least one [name] must be provided')\n  if (!options.name) throw new Error('Name must be provided')\n\n  const [type] = useState(options.type || 'text')\n  const [name] = useState(options.name)\n  const [placeholder] = useState(options.placeholder || 'Default Placeholder')\n  const [label] = useState(options.label || 'Label')\n  const [id] = useState(options.id || `${type}-${Math.random()}`)\n  const [value, setValue] = useState(options.value || '')\n\n  const inputValidation = options.validation || {}\n\n  const [validation, setValidation] = useState({\n    valid: inputValidation.valid || true,\n    shouldValidate: inputValidation.shouldValidate || false,\n    touched: inputValidation.touched || false,\n    errorMessage: inputValidation.errorMessage || 'Invalid value',\n    options: inputValidation.options\n  })\n\n  /* Input on change */\n  const onChange = (event) => {\n    const $value = event.target.value\n    const $params = validation.options\n\n    if (validation.shouldValidate) {\n      const $validate = validate($value, $params)\n\n      setValidation({\n        ...validation,\n        touched: true,\n        valid: $validate.isValid,\n        errorMessage: $validate.msg\n      })\n    } else {\n      setValidation({\n        ...validation,\n        touched: true,\n        valid: true\n      })\n    }\n\n    setValue($value)\n  }\n\n  /* Clear input */\n  const clear = () => setValue('')\n\n  const bind = { name, placeholder, value, label, id, onChange }\n\n  return {\n    bind,\n    bindV: { ...bind, validation },\n    name,\n    value,\n    clear,\n    validation\n  }\n}\n","import React from 'react'\nimport styles from '../styles.module.css'\n\nconst INVALID_VALUE = 'Invalid value'\n\nexport default function TextField(props) {\n  const {\n    type,\n    placeholder,\n    value,\n    onChange,\n    label,\n    id,\n    validation,\n    fieldstyles,\n    className\n  } = props\n\n  const htmlFor = id || `${type}-${Math.random()}`\n  let invalidInputStyle = null\n  let invalid = false\n  let error = INVALID_VALUE\n\n  let localStyles = { labelStyle: {}, inputStyle: {}, spanStyle: {} }\n  if (fieldstyles) {\n    localStyles = { ...fieldstyles }\n  }\n\n  if (validation) {\n    const isInvalid = (v) => !v.valid && v.shouldValidate && v.touched\n\n    if (isInvalid(validation)) invalidInputStyle = styles.invalid\n    invalid = isInvalid(validation)\n    error = validation.errorMessage || INVALID_VALUE\n  }\n\n  return (\n    <div className={className || styles.TextField}>\n      <label style={localStyles.labelStyle} htmlFor={htmlFor}>\n        {label || 'Label'}\n      </label>\n\n      <input\n        className={invalidInputStyle}\n        type={type || 'text'}\n        id={htmlFor}\n        placeholder={placeholder || 'Default placeholder'}\n        value={value}\n        onChange={onChange}\n        style={localStyles.inputStyle}\n        {...props}\n      />\n\n      {invalid ? <span style={localStyles.spanStyle}>{error}</span> : null}\n    </div>\n  )\n}\n","import React from 'react'\nimport { TextField, useInput } from 'react-sw-inputs-validation'\n\nconst App = () => {\n  const input = useInput({\n    label: 'Email: ',\n    name: 'email',\n    placeholder: 'Enter your email',\n    validation: {\n      shouldValidate: true,\n      options: [\n        'isEmail',\n        'required',\n        {type: 'minLength', min: 5, msg: 'Min length is 5'}\n      ]\n    }\n  })\n\n  return (\n    <div className=\"container\">\n      <TextField  {...input.bindV} />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'react-sw-inputs-validation/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}